/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.EnterpriseAdmin;

import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Harshada
 */
public class ManageEmployeePanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEmployeePanel
     */
    private Ecosystem system;
    private OrganizationDirectory organizationDirectory;
    private JPanel userContainer;
    private Organization org;
    private boolean userNameValid;
    private boolean nameValid;
    private boolean passwordValid;
    private boolean emailValid;

    public ManageEmployeePanel(JPanel userContainer, OrganizationDirectory organizationDirectory, Ecosystem system) {
        initComponents();
        this.userContainer = userContainer;
        this.organizationDirectory = organizationDirectory;
        this.system = system;
        populateComboBoxOrganization();
        populateOrganizationJComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        btnCreateEmployee = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        comboRole = new javax.swing.JComboBox();
        comboOrganization = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeJTable = new javax.swing.JTable();
        organizationJComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("CREATE EMPLOYEES");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 244, 50));

        jLabel2.setText("Organization");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        jLabel3.setText("Role");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 90, 40));

        lblName.setText("Name");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 190, -1));

        jLabel5.setText("Email Id");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 190, -1));

        lblPassword.setText("Password");
        add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        btnCreateEmployee.setText("CREATE");
        btnCreateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEmployeeActionPerformed(evt);
            }
        });
        add(btnCreateEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 110, 40));

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        comboRole.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        add(comboRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 190, 40));

        comboOrganization.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        comboOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOrganizationActionPerformed(evt);
            }
        });
        add(comboOrganization, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 190, 40));

        employeeJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "User Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(employeeJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 130, 370, 170));

        organizationJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBoxActionPerformed(evt);
            }
        });
        add(organizationJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, 160, 30));

        jLabel7.setText("Organization");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 110, 40));

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 330, 113, 44));
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 190, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        try
        {
        userContainer.remove(this);
        CardLayout layout = (CardLayout) userContainer.getLayout();
        layout.previous(userContainer);
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateEmployeeActionPerformed
        // TODO add your handling code here:
        try
        {
        if (validateData()) {
            String email = txtEmail.getText();
            String password = txtPassword.getText();

            Organization organization = (Organization) comboOrganization.getSelectedItem();

            Employee employee = new Employee();
            employee.setEmployeeName(txtName.getText());

            Role role = (Role) comboRole.getSelectedItem();

            if (organization.getEmployeeList().checkIfUsernameUnique(email)) {
                if (organization.getUserAccountList().checkIfUsernameUnique(email)) {

                    organization.getEmployeeList().createEmployee(txtName.getText());
                    organization.getUserAccountList().createUserAccount(email, password, employee, role);
                    JOptionPane.showMessageDialog(this, "Employee is created successfully");
                    txtEmail.setText("");
                    txtPassword.setText("");
                    txtName.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "The username you are trying to add already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                    txtEmail.setText("");
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Employee already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                txtName.setText("");
                return;
            }

            if (userNameValid && nameValid && passwordValid) {
                organization.getEmployeeList().createEmployee(txtName.getText());
                organization.getUserAccountList().createUserAccount(email, password, employee, role);
                JOptionPane.showMessageDialog(this, "Employee created successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                txtEmail.setText("");
                txtPassword.setText("");
                txtName.setText("");

            }

        }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }


    }//GEN-LAST:event_btnCreateEmployeeActionPerformed

    private void comboOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOrganizationActionPerformed
        // TODO add your handling code here:
        try
        {
        Organization organization = (Organization) comboOrganization.getSelectedItem();
        if (organization != null) {
            comboRolePopulate(organization);
        }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }
    }//GEN-LAST:event_comboOrganizationActionPerformed

    private void organizationJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBoxActionPerformed
        try
        {
        org = (Organization) organizationJComboBox.getSelectedItem();
        if (org != null) {
            populateTable(org);
        }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }
    }//GEN-LAST:event_organizationJComboBoxActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try
        {
        int row = employeeJTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to delete", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Employee employee = (Employee) employeeJTable.getValueAt(row, 1);
        UserAccount userAccount = (UserAccount) employeeJTable.getValueAt(row, 2);
        org.getEmployeeList().deleteEmployee(employee);
        org.getUserAccountList().deleteUserAccount(userAccount);
        JOptionPane.showMessageDialog(null, "Employee has been deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        populateTable(org);
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateEmployee;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox comboOrganization;
    private javax.swing.JComboBox comboRole;
    private javax.swing.JTable employeeJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables

    private void populateComboBoxOrganization() {
        try
        {
        comboOrganization.removeAllItems();

        for (Organization organization : organizationDirectory.getOrganizationList()) {
            comboOrganization.addItem(organization);
        }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }
    }

    private void comboRolePopulate(Organization organization) {
        try
        {
        comboRole.removeAllItems();
        for (Role r : organization.getSupportedRole()) {

            String role = r.toString();
            System.out.println(role);
            comboRole.addItem(r);
        }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }
    }

    private void populateTable(Organization organization) {
        try
        {
        DefaultTableModel model = (DefaultTableModel) employeeJTable.getModel();

        model.setRowCount(0);

        for (UserAccount userAccount : organization.getUserAccountList().getUserAccountList()) {
            Employee employee = userAccount.getEmployee();
            Object[] row = new Object[3];
            row[0] = employee.getEmpId();
            row[1] = employee;
            row[2] = userAccount;
            model.addRow(row);

        }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }

    }

    private void populateOrganizationJComboBox() {
        try
        {
        organizationJComboBox.removeAllItems();

        for (Organization organization : organizationDirectory.getOrganizationList()) {
            organizationJComboBox.addItem(organization);
        }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this, "Please try again");
        }
    }

    private boolean validateData() {
       
        String employeeName = txtName.getText();
        String password = txtPassword.getText();

        if (txtName.getText().length() <= 2 || !txtName.getText().matches("[a-zA-Z]+")) {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblName.setForeground(Color.RED);
            JOptionPane.showMessageDialog(this, "Please enter a valid name consisting of more than 2 letters");
            return false;
        }

        if (employeeName == null || employeeName.equals("")) {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblName.setForeground(Color.RED);
            JOptionPane.showMessageDialog(null, "Please enter employee  name");
            return false;
        }

        if (comboRole.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select an enterprise");
            return false;
        }
        if (comboOrganization.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select a network");
            return false;
        }
        if (password == null || password.equals("")) {
            JOptionPane.showMessageDialog(null, "Password can't be empty.");
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblPassword.setForeground(Color.RED);
            return false;
        }

        if (!passwordPatternCorrect()) {
            JOptionPane.showMessageDialog(null, "Paasword should be at least 6 digits and+"
                    + " a combination of number, uppercarse, lowercase abd secial cjaracter $,*,#,&");
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            return false;
        }
        if (!emailAddressValidation(txtEmail.getText().trim())) {
            JOptionPane.showMessageDialog(this, "Please enter a valid email address");
            return false;
        }

        return true;
    }

    private boolean emailAddressValidation(String email) {
        String emailValidation = "^[A-Za-z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
        Pattern pattern = Pattern.compile(emailValidation);
        Matcher m = pattern.matcher(email);
        return m.matches();
    }

    private boolean passwordPatternCorrect() {
        Pattern p = Pattern.compile("^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[$*#&])[A-Za-z\\d$*#&]{6,}$");
        Matcher m = p.matcher(txtPassword.getText());
        boolean b = m.matches();
        return b;
    }

}
